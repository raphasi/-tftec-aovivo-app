trigger:
  paths:
    include:
      - cicd/stages/stages-deploy-prd.yml # Aciona se houver mudanças no diretório de stages-deploy.yml

# Modicar os valores das variáveis de acordo com o ambiente!!!
variables:
  helmVersion: 'latest' # Versão do Helm a ser instalada
  acrName: 'acrtftecuksouth8503' # Nome do Azure Container Registry 
  azureSubscription: 'tftec-devops' # Nome da subscrição do Azure
  azureResourceGroup: 'rg-tftec-kubernetes' # Nome do grupo de recursos do Azure
  kubernetesCluster: 'aks-tftec-uksouth-001' # Nome do cluster Kubernetes
  imageRepository: 'acrtftecuksouth8503.azurecr.io/image/ao-vivo-sp-24/tftec-app' # Repositório da imagem Docker
  imageTag: '130' # Tag da imagem Docker
  namespace: 'tftec-prd' # Namespace do Kubernetes
  chartVersion: '130' # Versão do Helm Chart
  environment: 'prd' # Ambiente de deploy

jobs:
  - job: HelmDeploy
    displayName: 'Job: Deploy Helm Chart'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
      - task: HelmInstaller@1
        inputs:
          helmVersionToInstall: $(helmVersion)

      - task: AzureCLI@2
        displayName: 'Login no ACR'
        inputs:
          azureSubscription: $(azureSubscription)
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          inlineScript: |
            echo "Realizando login no ACR..."
            az acr login --name $(acrName)

      - script: |
          echo "Baixando o Helm Chart diretamente do ACR..."
          export HELM_EXPERIMENTAL_OCI=1
          helm pull oci://$(acrName).azurecr.io/helm-chart/ao-vivo-sp-24/tftec-app --version $(chartVersion) --untar
        displayName: 'Pull Helm Chart from ACR'

      - task: AzureCLI@2
        displayName: 'Config kubectl for AKS'
        inputs:
          azureSubscription: $(azureSubscription)
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          inlineScript: |
            echo "Config kubectl for AKS..."
            az aks get-credentials --resource-group $(azureResourceGroup) --name $(kubernetesCluster) --overwrite-existing

      - script: |
          if ! kubectl get namespace $(namespace); then
            echo "Criando o namespace $(namespace)..."
            kubectl create namespace $(namespace)
          else
            echo "O namespace $(namespace) já existe."
          fi
        displayName: 'Create Namespace if it does not exist'

      - task: HelmDeploy@0
        displayName: 'Deploy Helm Chart'
        inputs:
          azureSubscription: $(azureSubscription)
          kubernetesServiceEndpoint: tftec-kubernetes
          azureResourceGroup: $(azureResourceGroup)
          kubernetesCluster: $(kubernetesCluster)
          command: 'upgrade'
          chartType: 'FilePath'
          chartPath: './tftec-app'
          releaseName: tftec-api-auth-prd # Nome do release
          createNamespace: false
          namespace: $(namespace)
          valueFile: './chart/values-prd.yaml'
          overrideValues: |
            image.repository=$(imageRepository)
            image.tag=$(imageTag)
            replicaCount=1