parameters:
  - name: imageTag
    type: string
    default: '28'  # Valor padrão
    displayName: 'Tag da imagem Docker'

  - name: chartVersion
    type: string
    default: '28'  # Valor padrão
    displayName: 'Versão do Helm Chart'

# Remove o trigger automático
trigger: none

# Variáveis globais
variables:
  helmVersion: 'latest' 
  acrName: 'acrtftecuksouth8503'
  azureSubscription: 'tftec-devops'
  azureResourceGroup: 'rg-tftec-kubernetes'
  kubernetesCluster: 'aks-tftec-uksouth-001'
  imageRepository: 'acrtftecuksouth8503.azurecr.io/image/ao-vivo-sp-24/tftec-app'
  namespace: 'tftec-prd' 
  environment: 'prd'

jobs:
  - job: HelmDeploy
    displayName: 'Job: Deploy Helm Chart'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
      - task: HelmInstaller@1
        inputs:
          helmVersionToInstall: $(helmVersion)

      - task: AzureCLI@2
        displayName: 'Login no ACR'
        inputs:
          azureSubscription: $(azureSubscription)
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          inlineScript: |
            echo "Realizando login no ACR..."
            az acr login --name $(acrName)

      - script: |
          echo "Baixando o Helm Chart diretamente do ACR..."
          export HELM_EXPERIMENTAL_OCI=1
          helm pull oci://$(acrName).azurecr.io/helm-chart/ao-vivo-sp-24/tftec-app --version ${{ parameters.chartVersion }} --untar
        displayName: 'Pull Helm Chart from ACR'

      - task: AzureCLI@2
        displayName: 'Config kubectl for AKS'
        inputs:
          azureSubscription: $(azureSubscription)
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          inlineScript: |
            echo "Config kubectl for AKS..."
            az aks get-credentials --resource-group $(azureResourceGroup) --name $(kubernetesCluster) --overwrite-existing

      - script: |
          if ! kubectl get namespace $(namespace); then
            echo "Criando o namespace $(namespace)..."
            kubectl create namespace $(namespace)
          else
            echo "O namespace $(namespace) já existe."
          fi
        displayName: 'Create Namespace if it does not exist'

      - task: HelmDeploy@0
        displayName: 'Deploy Helm Chart'
        inputs:
          azureSubscription: $(azureSubscription)
          kubernetesServiceEndpoint: tftec-kubernetes
          azureResourceGroup: $(azureResourceGroup)
          kubernetesCluster: $(kubernetesCluster)
          command: 'upgrade'
          chartType: 'FilePath'
          chartPath: './tftec-app'
          releaseName: tftec-api-auth-prd 
          createNamespace: false
          namespace: $(namespace)
          overrideValues: |
            image.repository=$(imageRepository)
            image.tag=${{ parameters.imageTag }}  # Usando o parâmetro fornecido
            replicaCount=3
          valuesFile: 'values-$(environment).yaml'